// automatically generated by the FlatBuffers compiler, do not modify

package accesslogcounts

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AccessLogCount struct {
	_tab flatbuffers.Table
}

func GetRootAsAccessLogCount(buf []byte, offset flatbuffers.UOffsetT) *AccessLogCount {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AccessLogCount{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *AccessLogCount) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AccessLogCount) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AccessLogCount) ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccessLogCount) Path() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *AccessLogCount) Count() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccessLogCount) MutateCount(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *AccessLogCount) Timed() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AccessLogCount) MutateTimed(n uint64) bool {
	return rcv._tab.MutateUint64Slot(10, n)
}

func AccessLogCountStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func AccessLogCountAddID(builder *flatbuffers.Builder, ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ID), 0)
}
func AccessLogCountAddPath(builder *flatbuffers.Builder, Path flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Path), 0)
}
func AccessLogCountAddCount(builder *flatbuffers.Builder, Count uint64) {
	builder.PrependUint64Slot(2, Count, 0)
}
func AccessLogCountAddTimed(builder *flatbuffers.Builder, Timed uint64) {
	builder.PrependUint64Slot(3, Timed, 0)
}
func AccessLogCountEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
