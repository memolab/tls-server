// automatically generated by the FlatBuffers compiler, do not modify

package middcachez

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CacheHandlersObj struct {
	_tab flatbuffers.Table
}

func GetRootAsCacheHandlersObj(buf []byte, offset flatbuffers.UOffsetT) *CacheHandlersObj {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CacheHandlersObj{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CacheHandlersObj) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CacheHandlersObj) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CacheHandlersObj) ContentType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CacheHandlersObj) Status() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CacheHandlersObj) MutateStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *CacheHandlersObj) Timed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CacheHandlersObj) MutateTimed(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *CacheHandlersObj) Body() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func CacheHandlersObjStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func CacheHandlersObjAddContentType(builder *flatbuffers.Builder, contentType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(contentType), 0)
}
func CacheHandlersObjAddStatus(builder *flatbuffers.Builder, status int32) {
	builder.PrependInt32Slot(1, status, 0)
}
func CacheHandlersObjAddTimed(builder *flatbuffers.Builder, timed int64) {
	builder.PrependInt64Slot(2, timed, 0)
}
func CacheHandlersObjAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(body), 0)
}
func CacheHandlersObjEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
